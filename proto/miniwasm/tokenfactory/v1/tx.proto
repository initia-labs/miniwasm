syntax = "proto3";
package miniwasm.tokenfactory.v1;

import "amino/amino.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "miniwasm/tokenfactory/v1/params.proto";

option go_package = "github.com/initia-labs/miniwasm/x/tokenfactory/types";

// Msg defines the tokefactory module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateDenom defines a gRPC service method for creating a new denom.
  rpc CreateDenom(MsgCreateDenom) returns (MsgCreateDenomResponse);

  // Mint defines a gRPC service method for minting more of a token.
  rpc Mint(MsgMint) returns (MsgMintResponse);

  // Burn defines a gRPC service method for burning a token.
  rpc Burn(MsgBurn) returns (MsgBurnResponse);

  // ChangeAdmin defines a gRPC service method for changing the admin of a
  // denom.
  rpc ChangeAdmin(MsgChangeAdmin) returns (MsgChangeAdminResponse);

  // SetDenomMetadata defines a gRPC service method for setting the metadata of
  // a denom.
  rpc SetDenomMetadata(MsgSetDenomMetadata) returns (MsgSetDenomMetadataResponse);

  // SetBeforeSendHook defines a gRPC service method for setting the before send
  // hook of a denom.
  rpc SetBeforeSendHook(MsgSetBeforeSendHook) returns (MsgSetBeforeSendHookResponse);

  // ForceTransfer defines a gRPC service method for transferring a token from
  // one account to another.
  rpc ForceTransfer(MsgForceTransfer) returns (MsgForceTransferResponse);

  // UpdateParams defines an operation for updating the x/tokenfactory module
  // parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateDenom defines the message structure for the CreateDenom gRPC service
// method. It allows an account to create a new denom. It requires a sender
// address and a sub denomination. The (sender_address, sub_denomination) tuple
// must be unique and cannot be re-used.
//
// The resulting denom created is defined as
// <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
// originally set to be the creator, but this can be changed later. The token
// denom does not indicate the current admin.
message MsgCreateDenom {
  option (cosmos.msg.v1.signer) = "sender";

  option (amino.name) = "tokenfactory/MsgCreateDenom";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // subdenom can be up to 44 "alphanumeric" characters long.
  string subdenom = 2 [(gogoproto.moretags) = "yaml:\"subdenom\""];
}

// MsgCreateDenomResponse is the return value of MsgCreateDenom
// It returns the full string of the newly created denom
message MsgCreateDenomResponse {
  string new_token_denom = 1 [(gogoproto.moretags) = "yaml:\"new_token_denom\""];
}

// MsgMint is the sdk.Msg type for allowing an admin account to mint
// more of a token.
// Only the admin of the token factory denom has permission to mint unless
// the denom does not have any admin.
message MsgMint {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "tokenfactory/MsgMint";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
  string mint_to_address = 3 [
    (gogoproto.moretags) = "yaml:\"mint_to_address\"",
    (amino.dont_omitempty) = true
  ];
}

// MsgMintResponse defines the response structure for an executed
// MsgMint message.
message MsgMintResponse {}

// MsgBurn is the sdk.Msg type for allowing an admin account to burn
// a token.
// Only the admin of the token factory denom has permission to burn unless
// the denom does not have any admin.
message MsgBurn {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "tokenfactory/MsgBurn";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
  string burn_from_address = 3 [
    (gogoproto.moretags) = "yaml:\"burn_from_address\"",
    (amino.dont_omitempty) = true
  ];
}

// MsgBurnResponse defines the response structure for an executed
// MsgBurn message.
message MsgBurnResponse {}

// MsgChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
// adminship of a denom to a new account
message MsgChangeAdmin {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "tokenfactory/MsgChangeAdmin";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  string new_admin = 3 [(gogoproto.moretags) = "yaml:\"new_admin\""];
}

// MsgChangeAdminResponse defines the response structure for an executed
// MsgChangeAdmin message.
message MsgChangeAdminResponse {}

// MsgSetBeforeSendHook is the sdk.Msg type for allowing an admin account to
// assign a CosmWasm contract to call with a BeforeSend hook
message MsgSetBeforeSendHook {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "tokenfactory/MsgSetBeforeSendHook";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
  string cosmwasm_address = 3 [
    (gogoproto.moretags) = "yaml:\"cosmwasm_address\"",
    (amino.dont_omitempty) = true
  ];
}

// MsgSetBeforeSendHookResponse defines the response structure for an executed
// MsgSetBeforeSendHook message.
message MsgSetBeforeSendHookResponse {}

// MsgSetDenomMetadata is the sdk.Msg type for allowing an admin account to set
// the denom's bank metadata
message MsgSetDenomMetadata {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "tokenfactory/MsgSetDenomMetadata";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.bank.v1beta1.Metadata metadata = 2 [
    (gogoproto.moretags) = "yaml:\"metadata\"",
    (gogoproto.nullable) = false
  ];
}

// MsgSetDenomMetadataResponse defines the response structure for an executed
// MsgSetDenomMetadata message.
message MsgSetDenomMetadataResponse {}

// MsgForceTransfer is the sdk.Msg type for allowing an admin account to
// transfer a token from one account to another
message MsgForceTransfer {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "tokenfactory/MsgForceTransfer";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
  string transfer_from_address = 3 [(gogoproto.moretags) = "yaml:\"transfer_from_address\""];
  string transfer_to_address = 4 [(gogoproto.moretags) = "yaml:\"transfer_to_address\""];
}

// MsgForceTransferResponse defines the response structure for an executed
// MsgForceTransfer message.
message MsgForceTransferResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "move/MsgUpdateParams";

  // authority is the address that controls the module
  // (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // params defines the x/staking parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
