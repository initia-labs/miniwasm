syntax = "proto3";
package miniwasm.wasmextension.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmwasm/wasm/v1/types.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

option go_package = "github.com/initia-labs/miniwasm/x/wasmextension/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the wasm Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // StoreCodeAdmin to submit Wasm code to the system with admin permission
  rpc StoreCodeAdmin(MsgStoreCodeAdmin) returns (MsgStoreCodeAdminResponse);
}

// MsgStoreCodeAdmin submit Wasm code to the system with admin permission
message MsgStoreCodeAdmin {
  option (amino.name) = "wasmextension/MsgStoreCodeAdmin";
  option (cosmos.msg.v1.signer) = "sender";

  // Sender is the actor that signed the messages
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // WASMByteCode can be raw or gzip compressed
  bytes wasm_byte_code = 2 [ (gogoproto.customname) = "WASMByteCode" ];
  // Used in v1beta1
  reserved 3, 4;
  // InstantiatePermission access control to apply on contract creation,
  // optional
  cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5;
}
// MsgStoreCodeAdminResponse returns store result data.
message MsgStoreCodeAdminResponse {
  // CodeID is the reference to the stored WASM code
  uint64 code_id = 1 [ (gogoproto.customname) = "CodeID" ];
  // Checksum is the sha256 hash of the stored code
  bytes checksum = 2;
}
