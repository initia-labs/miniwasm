// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: miniwasm/wasmextension/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgStoreCodeAdmin submit Wasm code to the system with admin permission
type MsgStoreCodeAdmin struct {
	// Authority is the actor that signed the messages
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Creator is the actor that created the code
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// WASMByteCode can be raw or gzip compressed
	WASMByteCode []byte `protobuf:"bytes,3,opt,name=wasm_byte_code,json=wasmByteCode,proto3" json:"wasm_byte_code,omitempty"`
	// InstantiatePermission access control to apply on contract creation,
	// optional
	InstantiatePermission *AccessConfig `protobuf:"bytes,4,opt,name=instantiate_permission,json=instantiatePermission,proto3" json:"instantiate_permission,omitempty"`
}

func (m *MsgStoreCodeAdmin) Reset()         { *m = MsgStoreCodeAdmin{} }
func (m *MsgStoreCodeAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgStoreCodeAdmin) ProtoMessage()    {}
func (*MsgStoreCodeAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0bd85b49373c8e9, []int{0}
}
func (m *MsgStoreCodeAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStoreCodeAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStoreCodeAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStoreCodeAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStoreCodeAdmin.Merge(m, src)
}
func (m *MsgStoreCodeAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgStoreCodeAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStoreCodeAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStoreCodeAdmin proto.InternalMessageInfo

// MsgStoreCodeAdminResponse returns store result data.
type MsgStoreCodeAdminResponse struct {
	// CodeID is the reference to the stored WASM code
	CodeID uint64 `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	// Checksum is the sha256 hash of the stored code
	Checksum []byte `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *MsgStoreCodeAdminResponse) Reset()         { *m = MsgStoreCodeAdminResponse{} }
func (m *MsgStoreCodeAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStoreCodeAdminResponse) ProtoMessage()    {}
func (*MsgStoreCodeAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0bd85b49373c8e9, []int{1}
}
func (m *MsgStoreCodeAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStoreCodeAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStoreCodeAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStoreCodeAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStoreCodeAdminResponse.Merge(m, src)
}
func (m *MsgStoreCodeAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStoreCodeAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStoreCodeAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStoreCodeAdminResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgStoreCodeAdmin)(nil), "miniwasm.wasmextension.v1.MsgStoreCodeAdmin")
	proto.RegisterType((*MsgStoreCodeAdminResponse)(nil), "miniwasm.wasmextension.v1.MsgStoreCodeAdminResponse")
}

func init() {
	proto.RegisterFile("miniwasm/wasmextension/v1/tx.proto", fileDescriptor_c0bd85b49373c8e9)
}

var fileDescriptor_c0bd85b49373c8e9 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x6d, 0x49, 0xe9, 0x11, 0x55, 0xd4, 0x2a, 0xe0, 0x78, 0x70, 0xa2, 0x20, 0x44,
	0x14, 0x51, 0x5b, 0x0d, 0xd0, 0x81, 0x2d, 0x2e, 0x4b, 0x87, 0x48, 0xc8, 0x19, 0x90, 0x10, 0xc2,
	0x72, 0xec, 0xe3, 0x72, 0x82, 0xbb, 0x8b, 0xfc, 0x2e, 0x25, 0xd9, 0x50, 0x47, 0x26, 0x3e, 0x4a,
	0x06, 0x3e, 0x44, 0x25, 0x96, 0x8a, 0x89, 0xa9, 0x02, 0x67, 0xc8, 0xd7, 0x40, 0xe7, 0xd8, 0x29,
	0x6d, 0x44, 0x51, 0x97, 0xd3, 0xbd, 0xf7, 0x7e, 0xef, 0xfc, 0x7f, 0x7f, 0x3f, 0xdc, 0xe0, 0x4c,
	0xb0, 0x4f, 0x21, 0x70, 0x57, 0x1f, 0x64, 0xac, 0x88, 0x00, 0x26, 0x85, 0x7b, 0xbc, 0xef, 0xaa,
	0xb1, 0x33, 0x4c, 0xa4, 0x92, 0x46, 0xb5, 0x60, 0x9c, 0x4b, 0x8c, 0x73, 0xbc, 0x6f, 0x3d, 0x88,
	0x24, 0x70, 0x09, 0x2e, 0x07, 0xaa, 0x5b, 0x38, 0xd0, 0x45, 0x8f, 0xb5, 0x4b, 0x25, 0x95, 0xd9,
	0xd5, 0xd5, 0xb7, 0x3c, 0x5b, 0x5d, 0xe0, 0xc1, 0xa2, 0xb0, 0x08, 0xf2, 0xd2, 0x4e, 0xc8, 0x99,
	0x90, 0x6e, 0x76, 0xe6, 0xa9, 0x47, 0xd7, 0x68, 0x9b, 0x0c, 0x49, 0xde, 0xd9, 0xf8, 0xbe, 0x86,
	0x77, 0xba, 0x40, 0x7b, 0x4a, 0x26, 0xe4, 0x50, 0xc6, 0xa4, 0x13, 0x73, 0x26, 0x8c, 0x03, 0xbc,
	0x15, 0x8e, 0xd4, 0x40, 0x26, 0x4c, 0x4d, 0x4c, 0x54, 0x47, 0xcd, 0x2d, 0xcf, 0xfc, 0xf1, 0x6d,
	0x6f, 0x37, 0xff, 0x68, 0x27, 0x8e, 0x13, 0x02, 0xd0, 0x53, 0x09, 0x13, 0xd4, 0xbf, 0x40, 0x8d,
	0x36, 0xde, 0x8c, 0x12, 0x12, 0x2a, 0x99, 0x98, 0x6b, 0xff, 0xe9, 0x2a, 0x40, 0xe3, 0x00, 0x6f,
	0x6b, 0x85, 0x41, 0x7f, 0xa2, 0x48, 0x10, 0xc9, 0x98, 0x98, 0xeb, 0x75, 0xd4, 0xac, 0x78, 0x77,
	0xd3, 0xf3, 0x5a, 0xe5, 0x75, 0xa7, 0xd7, 0xf5, 0x26, 0x2a, 0x93, 0xe6, 0x57, 0x34, 0x57, 0x44,
	0xc6, 0x3b, 0x7c, 0x9f, 0x09, 0x50, 0xa1, 0x50, 0x2c, 0x54, 0x24, 0x18, 0x92, 0x84, 0x33, 0xd0,
	0x23, 0x9a, 0x1b, 0x75, 0xd4, 0xbc, 0xd3, 0x7e, 0xec, 0xfc, 0xd3, 0x79, 0xa7, 0x13, 0x45, 0x04,
	0xe0, 0x50, 0x8a, 0xf7, 0x8c, 0xfa, 0xf7, 0xfe, 0x7a, 0xe6, 0xd5, 0xf2, 0x95, 0x17, 0xed, 0x93,
	0xf9, 0xb4, 0x75, 0x31, 0xdb, 0x97, 0xf9, 0xb4, 0x55, 0xbb, 0x6c, 0xe5, 0x8a, 0x6f, 0x8d, 0xb7,
	0xb8, 0xba, 0x92, 0xf4, 0x09, 0x0c, 0xa5, 0x00, 0x62, 0x3c, 0xc4, 0x9b, 0x7a, 0xbc, 0x80, 0xc5,
	0x99, 0xa5, 0x1b, 0x1e, 0x4e, 0xcf, 0x6b, 0x65, 0xcd, 0x1d, 0xbd, 0xf4, 0xcb, 0xba, 0x74, 0x14,
	0x1b, 0x16, 0xbe, 0x1d, 0x0d, 0x48, 0xf4, 0x01, 0x46, 0x3c, 0xb3, 0xb0, 0xe2, 0x2f, 0xe3, 0xf6,
	0x09, 0xc2, 0xeb, 0x5d, 0xa0, 0x86, 0xc2, 0xdb, 0x57, 0xfe, 0xd7, 0x93, 0x6b, 0x66, 0x5d, 0x11,
	0x64, 0x3d, 0xbb, 0x09, 0x5d, 0xc8, 0xb7, 0x6e, 0x7d, 0x9e, 0x4f, 0x5b, 0xc8, 0xeb, 0x9d, 0xfe,
	0xb6, 0x4b, 0xa7, 0xa9, 0x8d, 0xce, 0x52, 0x1b, 0xfd, 0x4a, 0x6d, 0xf4, 0x75, 0x66, 0x97, 0xce,
	0x66, 0x76, 0xe9, 0xe7, 0xcc, 0x2e, 0xbd, 0x79, 0x4e, 0x99, 0x1a, 0x8c, 0xfa, 0x4e, 0x24, 0xb9,
	0xcb, 0x04, 0x53, 0x2c, 0xdc, 0xfb, 0x18, 0xf6, 0xc1, 0x5d, 0x2e, 0xe3, 0xf8, 0xca, 0x3a, 0x66,
	0xbb, 0xd8, 0x2f, 0x67, 0xcb, 0xf8, 0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xbd, 0xfa,
	0x82, 0x51, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// StoreCodeAdmin to submit Wasm code to the system with admin permission
	StoreCodeAdmin(ctx context.Context, in *MsgStoreCodeAdmin, opts ...grpc.CallOption) (*MsgStoreCodeAdminResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) StoreCodeAdmin(ctx context.Context, in *MsgStoreCodeAdmin, opts ...grpc.CallOption) (*MsgStoreCodeAdminResponse, error) {
	out := new(MsgStoreCodeAdminResponse)
	err := c.cc.Invoke(ctx, "/miniwasm.wasmextension.v1.Msg/StoreCodeAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// StoreCodeAdmin to submit Wasm code to the system with admin permission
	StoreCodeAdmin(context.Context, *MsgStoreCodeAdmin) (*MsgStoreCodeAdminResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) StoreCodeAdmin(ctx context.Context, req *MsgStoreCodeAdmin) (*MsgStoreCodeAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreCodeAdmin not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_StoreCodeAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStoreCodeAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StoreCodeAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miniwasm.wasmextension.v1.Msg/StoreCodeAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StoreCodeAdmin(ctx, req.(*MsgStoreCodeAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "miniwasm.wasmextension.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreCodeAdmin",
			Handler:    _Msg_StoreCodeAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miniwasm/wasmextension/v1/tx.proto",
}

func (m *MsgStoreCodeAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStoreCodeAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStoreCodeAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InstantiatePermission != nil {
		{
			size, err := m.InstantiatePermission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.WASMByteCode) > 0 {
		i -= len(m.WASMByteCode)
		copy(dAtA[i:], m.WASMByteCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WASMByteCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStoreCodeAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStoreCodeAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStoreCodeAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x12
	}
	if m.CodeID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgStoreCodeAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WASMByteCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.InstantiatePermission != nil {
		l = m.InstantiatePermission.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStoreCodeAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeID != 0 {
		n += 1 + sovTx(uint64(m.CodeID))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgStoreCodeAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStoreCodeAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStoreCodeAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WASMByteCode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WASMByteCode = append(m.WASMByteCode[:0], dAtA[iNdEx:postIndex]...)
			if m.WASMByteCode == nil {
				m.WASMByteCode = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstantiatePermission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InstantiatePermission == nil {
				m.InstantiatePermission = &AccessConfig{}
			}
			if err := m.InstantiatePermission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStoreCodeAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStoreCodeAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStoreCodeAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeID", wireType)
			}
			m.CodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], dAtA[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
